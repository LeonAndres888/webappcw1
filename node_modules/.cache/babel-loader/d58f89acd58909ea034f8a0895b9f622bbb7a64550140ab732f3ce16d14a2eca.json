{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-02e05d50\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  id: \"titlename\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_lesson_component = _resolveComponent(\"lesson-component\");\n  const _component_checkout_component = _resolveComponent(\"checkout-component\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", null, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($data.sitename), 1), _createElementVNode(\"button\", {\n    id: \"cartBtn\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleCart && $options.toggleCart(...args))\n  }, \" 🛒 Cart (\" + _toDisplayString($options.cartItemCount) + \") \", 1)]), _createElementVNode(\"main\", null, [$data.showProduct ? (_openBlock(), _createBlock(_component_lesson_component, {\n    key: 0,\n    lessons: $data.products,\n    onAddToCart: _ctx.addItemToCart,\n    \"onUpdate:searchLesson\": _cache[1] || (_cache[1] = $event => $data.searchLesson = $event),\n    \"onUpdate:sortAttribute\": _cache[2] || (_cache[2] = $event => $data.sortAttribute = $event),\n    onUpdateSortOrder: _cache[3] || (_cache[3] = $event => $data.sortOrder = $event)\n  }, null, 8, [\"lessons\", \"onAddToCart\"])) : (_openBlock(), _createBlock(_component_checkout_component, {\n    key: 1,\n    cart: $data.cart,\n    onRemoveFromCart: _ctx.removeItemFromCart\n  }, null, 8, [\"cart\", \"onRemoveFromCart\"]))])]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$data","sitename","onClick","_cache","args","$options","toggleCart","cartItemCount","showProduct","_createBlock","_component_lesson_component","key","lessons","products","onAddToCart","_ctx","addItemToCart","$event","searchLesson","sortAttribute","onUpdateSortOrder","sortOrder","_component_checkout_component","cart","onRemoveFromCart","removeItemFromCart"],"sources":["C:\\Users\\andre\\OneDrive\\Desktop\\CW2FinalFolder\\webappcw1\\src\\components\\ParentComponent.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <header>\r\n      <h1 id=\"titlename\">{{ sitename }}</h1>\r\n      <button id=\"cartBtn\" @click=\"toggleCart\">\r\n        🛒 Cart ({{ cartItemCount }})\r\n      </button>\r\n    </header>\r\n    <main>\r\n      <lesson-component\r\n        v-if=\"showProduct\"\r\n        :lessons=\"products\"\r\n        @add-to-cart=\"addItemToCart\"\r\n        @update:searchLesson=\"searchLesson = $event\"\r\n        @update:sortAttribute=\"sortAttribute = $event\"\r\n        @update-sort-order=\"sortOrder = $event\"\r\n      />\r\n      <checkout-component\r\n        v-else\r\n        :cart=\"cart\"\r\n        @remove-from-cart=\"removeItemFromCart\"\r\n      />\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport LessonComponent from \"./LessonComponent.vue\";\r\nimport CheckoutComponent from \"./CheckoutComponent.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    LessonComponent,\r\n    CheckoutComponent,\r\n  },\r\n  data() {\r\n    return {\r\n      sitename: \"👨‍🎓 STUDY SESSION STORE 👩‍🎓\",\r\n      showProduct: true,\r\n      products: [],\r\n      cart: [],\r\n      searchLesson: \"\",\r\n      sortAttribute: \"title\",\r\n      sortOrder: \"\",\r\n      custName: \"\",\r\n      custPhone: \"\",\r\n      orderSubmitted: false,\r\n    };\r\n  },\r\n  computed: {\r\n\r\n    cartItemCount() {\r\n      return this.cart.reduce((total, item) => total + item.quantity, 0);\r\n    },\r\n    validCheckout() {\r\n      const nameRegex = /^[A-Za-z\\s]+$/;\r\n      const phoneRegex = /^[0-9()-]+$/;\r\n      return nameRegex.test(this.custName) && phoneRegex.test(this.custPhone);\r\n    },\r\n    sortedProducts() {\r\n      // Sorts filtered product list based on selected criteria\r\n      let modifier = this.sortOrder === \"ascending\" ? 1 : -1;\r\n      return this.filteredProducts.slice().sort((a, b) => {\r\n        if (\r\n          this.sortAttribute === \"price\" ||\r\n          this.sortAttribute === \"availableInventory\"\r\n        ) {\r\n          return (a[this.sortAttribute] - b[this.sortAttribute]) * modifier;\r\n        }\r\n        return (\r\n          a[this.sortAttribute].localeCompare(b[this.sortAttribute]) * modifier\r\n        );\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    fetchLessons() {\r\n      fetch(\r\n        \"https://storefinal-env.eba-vfsgptpf.us-east-1.elasticbeanstalk.com/api/lessons\"\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          this.products = data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lessons:\", error);\r\n        });\r\n    },\r\n    submitOrder() {\r\n      // Submits user's order to the server and handles the response\r\n      const order = {\r\n        name: this.custName,\r\n        phoneNumber: this.custPhone,\r\n        items: this.cart.map((item) => ({\r\n          lessonId: item._id,\r\n          quantity: item.quantity,\r\n        })),\r\n      };\r\n\r\n      // Log order items to the console before submitting\r\n      console.log(\"Order items before submitting:\", order.items);\r\n\r\n      fetch(\r\n        \"https://storefinal-env.eba-vfsgptpf.us-east-1.elasticbeanstalk.com/api/orders\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(order),\r\n        }\r\n      )\r\n        .then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          this.orderSubmitted = true;\r\n          console.log(\"Order submitted:\", data);\r\n          // Call updateLessonSpaces with a new parameter to indicate order submission\r\n          return this.updateLessonSpaces(order.items, true);\r\n        })\r\n        .then(() => {\r\n          // Re-fetch lessons to update the local state with new data from the server\r\n          this.fetchLessons();\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error submitting order:\", error);\r\n        });\r\n    },\r\n    updateLessonSpaces(orderedItems, isOrderSubmitted = false) {\r\n      // Updates available space in lessons after an order is submitted\r\n      if (!isOrderSubmitted) {\r\n        return Promise.resolve();\r\n      }\r\n\r\n      const updatePromises = orderedItems.map((item) => {\r\n        return fetch(\r\n          `https://storefinal-env.eba-vfsgptpf.us-east-1.elasticbeanstalk.com/api/lessons/${item.lessonId}`,\r\n          {\r\n            method: \"PUT\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ numberToDecrease: item.quantity }),\r\n          }\r\n        ).then((response) => {\r\n          if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n          }\r\n          return response.json();\r\n        });\r\n      });\r\n\r\n      return Promise.all(updatePromises)\r\n        .then(() => {\r\n          this.fetchLessons(); // Fetch the updated lessons data\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error updating lessons:\", error);\r\n        });\r\n    },\r\n    canAddToCart(product) {\r\n      // Check if product can be added to cart\r\n      let cartItem = this.cart.find((item) => item.id === product.id);\r\n      let cartItemCount = cartItem ? cartItem.quantity : 0;\r\n      return product.availableInventory > cartItemCount;\r\n    },\r\n    addItemCart(lesson) {\r\n      // Check if the lesson can be added to the cart based on available inventory\r\n      if (lesson.availableInventory <= 0) {\r\n        alert(\"This lesson is fully booked.\");\r\n        return; // Exit the function if no inventory\r\n      }\r\n\r\n      // Decrease the available inventory by 1\r\n      lesson.availableInventory--;\r\n\r\n      // Add the lesson to the cart\r\n      let cartItem = this.cart.find((item) => item.id === lesson.id);\r\n      if (cartItem) {\r\n        cartItem.quantity++;\r\n      } else {\r\n        this.cart.push({ ...lesson, quantity: 1 });\r\n      }\r\n    },\r\n    updateSortOrder(order) {\r\n      // Update sorting order based on asc or dsc buttons\r\n      this.sortOrder = order;\r\n    },\r\n    removeItemCart(item) {\r\n      let cartItemIndex = this.cart.findIndex(\r\n        (cartItem) => cartItem.id === item.id\r\n      );\r\n      if (cartItemIndex > -1) {\r\n        let cartItem = this.cart[cartItemIndex];\r\n        if (cartItem.quantity > 1) {\r\n          cartItem.quantity--;\r\n        } else {\r\n          this.cart.splice(cartItemIndex, 1);\r\n        }\r\n        // Increase the available inventory by 1\r\n        let lesson = this.products.find((lesson) => lesson.id === item.id);\r\n        if (lesson) {\r\n          lesson.availableInventory++;\r\n        }\r\n      }\r\n    },\r\n    toggleCart() {\r\n      this.showProduct = !this.showProduct;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchLessons();\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\nbutton {\r\n  padding: 8px 20px;\r\n  border: none;\r\n  background-color: #2a2a2a;\r\n  color: #ffffff;\r\n  transition: background-color 0.6s ease;\r\n  border-radius: 50px;\r\n  cursor: pointer;\r\n}\r\n#cartBtn {\r\n  border-radius: 5px;\r\n  height: 70px;\r\n  width: 180px;\r\n  position: absolute;\r\n  right: 100px;\r\n  top: 50px;\r\n}\r\n#titlename {\r\n  font-size: 50px;\r\n  font-weight: bold;\r\n  color: #712626;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #676767;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n\r\n\r\n</style>\r\n"],"mappings":";;;EACOA,EAAE,EAAC;AAAK;;EAELA,EAAE,EAAC;AAAW;;;;uBAFtBC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJC,mBAAA,CAKS,iBAJPA,mBAAA,CAAsC,MAAtCC,UAAsC,EAAAC,gBAAA,CAAhBC,KAAA,CAAAC,QAAQ,OAC9BJ,mBAAA,CAES;IAFDH,EAAE,EAAC,SAAS;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,YAC9B,GAAAL,gBAAA,CAAGM,QAAA,CAAAE,aAAa,IAAG,IAC9B,K,GAEFV,mBAAA,CAcO,eAZGG,KAAA,CAAAQ,WAAW,I,cADnBC,YAAA,CAOEC,2BAAA;IAhBRC,GAAA;IAWSC,OAAO,EAAEZ,KAAA,CAAAa,QAAQ;IACjBC,WAAW,EAAEC,IAAA,CAAAC,aAAa;IAC1B,uBAAmB,EAAAb,MAAA,QAAAA,MAAA,MAAAc,MAAA,IAAEjB,KAAA,CAAAkB,YAAY,GAAGD,MAAM;IAC1C,wBAAoB,EAAAd,MAAA,QAAAA,MAAA,MAAAc,MAAA,IAAEjB,KAAA,CAAAmB,aAAa,GAAGF,MAAM;IAC5CG,iBAAiB,EAAAjB,MAAA,QAAAA,MAAA,MAAAc,MAAA,IAAEjB,KAAA,CAAAqB,SAAS,GAAGJ,MAAM;4DAExCR,YAAA,CAIEa,6BAAA;IArBRX,GAAA;IAmBSY,IAAI,EAAEvB,KAAA,CAAAuB,IAAI;IACVC,gBAAgB,EAAET,IAAA,CAAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}