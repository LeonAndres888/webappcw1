{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-79a5ceb8\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  id: \"titlename\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_lesson_component = _resolveComponent(\"lesson-component\");\n  const _component_checkout_component = _resolveComponent(\"checkout-component\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", null, [_createElementVNode(\"h1\", _hoisted_2, _toDisplayString($data.sitename), 1), _createElementVNode(\"button\", {\n    id: \"cartBtn\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleCart && $options.toggleCart(...args))\n  }, \" 🛒 Cart (\" + _toDisplayString($options.cartItemCount) + \") \", 1)]), _createElementVNode(\"main\", null, [$data.showProduct ? (_openBlock(), _createBlock(_component_lesson_component, {\n    key: 0,\n    products: $data.products,\n    onAddItemToCart: $options.addItemToCart,\n    searchLesson: $data.searchLesson,\n    sortAttribute: $data.sortAttribute,\n    sortOrder: $data.sortOrder,\n    \"onUpdate:searchLesson\": _cache[1] || (_cache[1] = $event => $data.searchLesson = $event),\n    \"onUpdate:sortAttribute\": _cache[2] || (_cache[2] = $event => $data.sortAttribute = $event),\n    onUpdateSortOrder: _cache[3] || (_cache[3] = $event => $data.sortOrder = $event)\n  }, null, 8, [\"products\", \"onAddItemToCart\", \"searchLesson\", \"sortAttribute\", \"sortOrder\"])) : (_openBlock(), _createBlock(_component_checkout_component, {\n    key: 1,\n    cart: $data.cart,\n    onRemoveItemFromCart: $options.removeItemFromCart,\n    onSubmitOrder: $options.submitOrder,\n    validCheckout: $options.validCheckout,\n    orderSubmitted: $data.orderSubmitted\n  }, null, 8, [\"cart\", \"onRemoveItemFromCart\", \"onSubmitOrder\", \"validCheckout\", \"orderSubmitted\"]))])]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_toDisplayString","$data","sitename","onClick","_cache","args","$options","toggleCart","cartItemCount","showProduct","_createBlock","_component_lesson_component","key","products","onAddItemToCart","addItemToCart","searchLesson","sortAttribute","sortOrder","$event","onUpdateSortOrder","_component_checkout_component","cart","onRemoveItemFromCart","removeItemFromCart","onSubmitOrder","submitOrder","validCheckout","orderSubmitted"],"sources":["C:\\Users\\andre\\OneDrive\\Desktop\\CW2FinalFolder\\webappcw1\\src\\components\\ParentComponent.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <header>\r\n      <h1 id=\"titlename\">{{ sitename }}</h1>\r\n      <button id=\"cartBtn\" @click=\"toggleCart\">\r\n        🛒 Cart ({{ cartItemCount }})\r\n      </button>\r\n    </header>\r\n    <main>\r\n      <lesson-component\r\n        v-if=\"showProduct\"\r\n        :products=\"products\"\r\n        @add-item-to-cart=\"addItemToCart\"\r\n        :searchLesson=\"searchLesson\"\r\n        :sortAttribute=\"sortAttribute\"\r\n        :sortOrder=\"sortOrder\"\r\n        @update:searchLesson=\"searchLesson = $event\"\r\n        @update:sortAttribute=\"sortAttribute = $event\"\r\n        @update-sort-order=\"sortOrder = $event\"\r\n      />\r\n\r\n      <checkout-component\r\n        v-else\r\n        :cart=\"cart\"\r\n        @remove-item-from-cart=\"removeItemFromCart\"\r\n        @submit-order=\"submitOrder\"\r\n        :validCheckout=\"validCheckout\"\r\n        :orderSubmitted=\"orderSubmitted\"\r\n      />\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport LessonComponent from \"./LessonComponent.vue\";\r\nimport CheckoutComponent from \"./CheckoutComponent.vue\";\r\n\r\nexport default {\r\n  components: {\r\n    LessonComponent,\r\n    CheckoutComponent,\r\n  },\r\n  data() {\r\n    return {\r\n      sitename: \"👨‍🎓 STUDY SESSION STORE 👩‍🎓\",\r\n      showProduct: true,\r\n      products: [],\r\n      cart: [],\r\n      searchLesson: \"\",\r\n      sortAttribute: \"title\",\r\n      sortOrder: \"ascending\",\r\n      custName: \"\",\r\n      custPhone: \"\",\r\n      orderSubmitted: false,\r\n    };\r\n  },\r\n  computed: {\r\n    cartItemCount() {\r\n      return this.cart.reduce((total, item) => total + item.quantity, 0);\r\n    },\r\n    validCheckout() {\r\n      const nameRegex = /^[A-Za-z\\s]+$/;\r\n      const phoneRegex = /^[0-9()-]+$/;\r\n      return nameRegex.test(this.custName) && phoneRegex.test(this.custPhone);\r\n    },\r\n  },\r\n  methods: {\r\n    fetchLessons() {\r\n      fetch(\r\n        \"https://storefinal-env.eba-vfsgptpf.us-east-1.elasticbeanstalk.com/api/lessons\"\r\n      )\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          this.products = data;\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching lessons:\", error);\r\n        });\r\n    },\r\n    async submitOrder() {\r\n      if (!this.validCheckout) {\r\n        alert(\"Please ensure all fields are filled out correctly.\");\r\n        return;\r\n      }\r\n\r\n      // Validate cart items have valid lesson IDs\r\n      for (const item of this.cart) {\r\n        if (!item.id) {\r\n          console.error(\"Invalid lesson ID found in cart items:\", item);\r\n          alert(\"An error occurred with the cart items. Please try again.\");\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Construct the order payload with validated lesson IDs\r\n      const orderPayload = {\r\n        name: this.custName,\r\n        phoneNumber: this.custPhone,\r\n        items: this.cart.map((item) => ({\r\n          lessonId: item.lessonId || item.id, // Adjust this line to ensure you use the correct property\r\n          quantity: item.quantity,\r\n        })),\r\n      };\r\n\r\n      try {\r\n        const response = await fetch(\r\n          \"https://storefinal-env.eba-vfsgptpf.us-east-1.elasticbeanstalk.com/api/orders\",\r\n          {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(orderPayload),\r\n          }\r\n        );\r\n\r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || \"Failed to submit order.\");\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"Order submitted successfully:\", data);\r\n\r\n        // If the order submission was successful, proceed with updating lesson spaces\r\n        await this.updateLessonSpaces(orderPayload.items, true);\r\n\r\n        this.orderSubmitted = true;\r\n        this.cart = []; // Clear the cart after successful order submission\r\n        alert(\"Order has been successfully submitted.\");\r\n      } catch (error) {\r\n        console.error(\"Order submission failed:\", error);\r\n        alert(\r\n          \"Failed to submit the order. Please check the details and try again.\"\r\n        );\r\n      }\r\n    },\r\n    async updateLessonSpaces(orderedItems, isOrderSubmitted) {\r\n      if (!isOrderSubmitted) return;\r\n\r\n      try {\r\n        await Promise.all(\r\n          orderedItems.map(async (item) => {\r\n            // Check if the lessonId is present and is a valid identifier\r\n            if (!item.id) {\r\n              console.error(\"Invalid or missing lessonId:\", item);\r\n              alert(\"An error occurred with the cart items. Please try again.\");\r\n              return; // Skip this item\r\n            }\r\n\r\n            // Update the PUT request URL to use the correct `item.id`\r\n            const response = await fetch(\r\n              `https://storefinal-env.eba-vfsgptpf.us-east-1.elasticbeanstalk.com/api/lessons/${item.id}`,\r\n              {\r\n                method: \"PUT\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ numberToDecrease: item.quantity }),\r\n              }\r\n            );\r\n\r\n            if (!response.ok) {\r\n              const responseText = await response.text();\r\n              throw new Error(\r\n                `Failed to update lesson space. Server responded with status ${response.status}: ${responseText}`\r\n              );\r\n            }\r\n\r\n            console.log(`Lesson space updated for lessonId: ${item.id}`);\r\n          })\r\n        );\r\n\r\n        this.fetchLessons(); // Refresh lessons data\r\n      } catch (error) {\r\n        console.error(\"Error updating lesson spaces:\", error);\r\n        alert(\"Failed to update lesson spaces. Please try again.\");\r\n      }\r\n    },\r\n\r\n    canAddToCart(product) {\r\n      // Check if product can be added to cart\r\n      let cartItem = this.cart.find((item) => item.id === product.id);\r\n      let cartItemCount = cartItem ? cartItem.quantity : 0;\r\n      return product.availableInventory > cartItemCount;\r\n    },\r\n    addItemToCart(lesson) {\r\n      console.log(\"Adding to cart:\", lesson);\r\n      // Check if the lesson can be added to the cart based on available inventory\r\n      if (lesson.availableInventory <= 0) {\r\n        alert(\"This lesson is fully booked.\");\r\n        return; // Exit the function if no inventory\r\n      }\r\n\r\n      // Decrease the available inventory by 1\r\n      lesson.availableInventory--;\r\n\r\n      // Add the lesson to the cart\r\n      let cartItem = this.cart.find((item) => item.id === lesson.id);\r\n      if (cartItem) {\r\n        cartItem.quantity++;\r\n      } else {\r\n        this.cart.push({ ...lesson, quantity: 1 });\r\n      }\r\n    },\r\n    updateSortOrder(order) {\r\n      // Update sorting order based on asc or dsc buttons\r\n      this.sortOrder = order;\r\n    },\r\n    removeItemFromCart(item) {\r\n      let cartItemIndex = this.cart.findIndex(\r\n        (cartItem) => cartItem.id === item.id\r\n      );\r\n      if (cartItemIndex > -1) {\r\n        let cartItem = this.cart[cartItemIndex];\r\n        if (cartItem.quantity > 1) {\r\n          cartItem.quantity--;\r\n        } else {\r\n          this.cart.splice(cartItemIndex, 1);\r\n        }\r\n        // Increase the available inventory by 1\r\n        let lesson = this.products.find((lesson) => lesson.id === item.id);\r\n        if (lesson) {\r\n          lesson.availableInventory++;\r\n        }\r\n      }\r\n    },\r\n    toggleCart() {\r\n      this.showProduct = !this.showProduct;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.fetchLessons();\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.dropDown {\r\n  border-radius: 5px;\r\n  height: 30px;\r\n  width: 110px;\r\n  margin-right: 40px;\r\n  position: absolute;\r\n  left: 500px;\r\n  top: 140px;\r\n}\r\nbutton {\r\n  padding: 8px 20px;\r\n  border: none;\r\n  background-color: #2a2a2a;\r\n  color: #ffffff;\r\n  transition: background-color 0.6s ease;\r\n  border-radius: 50px;\r\n  cursor: pointer;\r\n}\r\n#cartBtn {\r\n  border-radius: 5px;\r\n  height: 70px;\r\n  width: 180px;\r\n  position: absolute;\r\n  right: 100px;\r\n  top: 50px;\r\n}\r\n#titlename {\r\n  font-size: 50px;\r\n  font-weight: bold;\r\n  color: #712626;\r\n  margin-top: 10px;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #676767;\r\n}\r\n\r\nbutton:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n#searchBar {\r\n  width: 200px;\r\n  height: 40px;\r\n  border-radius: 10px;\r\n  position: absolute;\r\n  top: 130px;\r\n  left: 660px;\r\n}\r\n\r\n#ascButton {\r\n  border-radius: 5px;\r\n  height: 30px;\r\n  width: 110px;\r\n  margin-right: 40px;\r\n  position: absolute;\r\n  left: 230px;\r\n  top: 140px;\r\n}\r\n#dscButton {\r\n  border-radius: 5px;\r\n  height: 30px;\r\n  width: 110px;\r\n  position: absolute;\r\n  left: 350px;\r\n  top: 140px;\r\n}\r\n</style>\r\n"],"mappings":";;;EACOA,EAAE,EAAC;AAAK;;EAELA,EAAE,EAAC;AAAW;;;;uBAFtBC,mBAAA,CA6BM,OA7BNC,UA6BM,GA5BJC,mBAAA,CAKS,iBAJPA,mBAAA,CAAsC,MAAtCC,UAAsC,EAAAC,gBAAA,CAAhBC,KAAA,CAAAC,QAAQ,OAC9BJ,mBAAA,CAES;IAFDH,EAAE,EAAC,SAAS;IAAEQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,YAC9B,GAAAL,gBAAA,CAAGM,QAAA,CAAAE,aAAa,IAAG,IAC9B,K,GAEFV,mBAAA,CAqBO,eAnBGG,KAAA,CAAAQ,WAAW,I,cADnBC,YAAA,CAUEC,2BAAA;IAnBRC,GAAA;IAWSC,QAAQ,EAAEZ,KAAA,CAAAY,QAAQ;IAClBC,eAAgB,EAAER,QAAA,CAAAS,aAAa;IAC/BC,YAAY,EAAEf,KAAA,CAAAe,YAAY;IAC1BC,aAAa,EAAEhB,KAAA,CAAAgB,aAAa;IAC5BC,SAAS,EAAEjB,KAAA,CAAAiB,SAAS;IACpB,uBAAmB,EAAAd,MAAA,QAAAA,MAAA,MAAAe,MAAA,IAAElB,KAAA,CAAAe,YAAY,GAAGG,MAAM;IAC1C,wBAAoB,EAAAf,MAAA,QAAAA,MAAA,MAAAe,MAAA,IAAElB,KAAA,CAAAgB,aAAa,GAAGE,MAAM;IAC5CC,iBAAiB,EAAAhB,MAAA,QAAAA,MAAA,MAAAe,MAAA,IAAElB,KAAA,CAAAiB,SAAS,GAAGC,MAAM;+GAGxCT,YAAA,CAOEW,6BAAA;IA5BRT,GAAA;IAuBSU,IAAI,EAAErB,KAAA,CAAAqB,IAAI;IACVC,oBAAqB,EAAEjB,QAAA,CAAAkB,kBAAkB;IACzCC,aAAY,EAAEnB,QAAA,CAAAoB,WAAW;IACzBC,aAAa,EAAErB,QAAA,CAAAqB,aAAa;IAC5BC,cAAc,EAAE3B,KAAA,CAAA2B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}